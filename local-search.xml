<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SekaiCTF 2025 Sekai Bank WriteUp</title>
    <link href="/2025/08/28/SekaiCTF%202025%20Sekai%20Bank%20WriteUp/"/>
    <url>/2025/08/28/SekaiCTF%202025%20Sekai%20Bank%20WriteUp/</url>
    
    <content type="html"><![CDATA[<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>打开<code>NP管理器</code>反编译APK</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@POST(&quot;flag&quot;)</span><br>Call&lt;String&gt; <span class="hljs-title function_">getFlag</span><span class="hljs-params">(<span class="hljs-meta">@Body</span> FlagRequest flagRequest)</span><br></code></pre></td></tr></table></figure><p>找到获取Flag的方法<code>com.sekai.bank.network.ApiService.getFlag</code></p><p>进到<code>FlagRequest</code>里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlagRequest</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> unmask_flag;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FlagRequest</span><span class="hljs-params">(<span class="hljs-type">boolean</span> z)</span> &#123;<br>        <span class="hljs-built_in">this</span>.unmask_flag = z;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">getUnmaskFlag</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.unmask_flag;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUnmaskFlag</span><span class="hljs-params">(<span class="hljs-type">boolean</span> z)</span> &#123;<br>        <span class="hljs-built_in">this</span>.unmask_flag = z;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从这里分析的值，我们可以伪造一个<code>POST</code>请求来得到Flag</p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>先登录，通过<code>ProxyPin</code>抓包看看请求体</p><p><img src="/assets/SekaiCTF%202025%20Sekai%20Bank%20WriteUp/1.png" alt="image.png"></p><p>发现有一个<code>X-Signature</code></p><p>继续打开<code>NP管理器</code>搜索<code>X-Signature</code>字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Response <span class="hljs-title function_">intercept</span><span class="hljs-params">(Chain chain)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> chain.request();<br>        <span class="hljs-keyword">try</span> &#123;<br>            chain = chain.proceed(request.newBuilder().header(<span class="hljs-string">&quot;X-Signature&quot;</span>, generateSignature(request)).build());<br>            <span class="hljs-keyword">return</span> chain;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(<span class="hljs-string">&quot;SekaiBank-API&quot;</span>, <span class="hljs-string">&quot;Failed to generate signature: &quot;</span> + e.getMessage());<br>            <span class="hljs-keyword">return</span> chain.proceed(request);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以看到一个<code>generateSignature</code>方法，定位进去看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String <span class="hljs-title function_">generateSignature</span><span class="hljs-params">(Request request)</span> <span class="hljs-keyword">throws</span> IOException, GeneralSecurityException &#123;<br>        Throwable e;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> request.method() + <span class="hljs-string">&quot;/api&quot;</span>.concat(getEndpointPath(request)) + getRequestBodyAsString(request);<br>        <span class="hljs-type">SekaiApplication</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> SekaiApplication.getInstance();<br>        <span class="hljs-type">PackageManager</span> <span class="hljs-variable">packageManager</span> <span class="hljs-operator">=</span> instance.getPackageManager();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">packageName</span> <span class="hljs-operator">=</span> instance.getPackageName();<br>        <span class="hljs-keyword">try</span> &#123;<br>            Signature[] apkContentsSigners;<br>            <span class="hljs-keyword">if</span> (VERSION.SDK_INT &gt;= <span class="hljs-number">28</span>) &#123;<br>                <span class="hljs-type">PackageInfo</span> <span class="hljs-variable">packageInfo</span> <span class="hljs-operator">=</span> packageManager.getPackageInfo(packageName, <span class="hljs-number">134217728</span>);<br>                <span class="hljs-type">SigningInfo</span> <span class="hljs-variable">signingInfo</span> <span class="hljs-operator">=</span> packageInfo.signingInfo;<br>                apkContentsSigners = signingInfo != <span class="hljs-literal">null</span> ? signingInfo.hasMultipleSigners() ? signingInfo.getApkContentsSigners() : signingInfo.getSigningCertificateHistory() : packageInfo.signatures;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                apkContentsSigners = packageManager.getPackageInfo(packageName, <span class="hljs-number">64</span>).signatures;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (apkContentsSigners == <span class="hljs-literal">null</span> || apkContentsSigners.length &lt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GeneralSecurityException</span>(<span class="hljs-string">&quot;No app signature found&quot;</span>);<br>            &#125;<br>            <span class="hljs-type">MessageDigest</span> <span class="hljs-variable">instance2</span> <span class="hljs-operator">=</span> MessageDigest.getInstance(<span class="hljs-string">&quot;SHA-256&quot;</span>);<br>            <span class="hljs-keyword">for</span> (Signature toByteArray : apkContentsSigners) &#123;<br>                instance2.update(toByteArray.toByteArray());<br>            &#125;<br>            <span class="hljs-keyword">return</span> calculateHMAC(str, instance2.digest());<br>        &#125; <span class="hljs-keyword">catch</span> (NameNotFoundException e2) &#123;<br>            e = e2;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GeneralSecurityException</span>(<span class="hljs-string">&quot;Unable to extract app signature&quot;</span>, e);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e3) &#123;<br>            e = e3;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GeneralSecurityException</span>(<span class="hljs-string">&quot;Unable to extract app signature&quot;</span>, e);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以看到<code>str</code>字符串，是由<code>getEndpointPath</code>和<code>getRequestBodyAsString</code>拼接得到的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> request.method() + <span class="hljs-string">&quot;/api&quot;</span>.concat(getEndpointPath(request)) + getRequestBodyAsString(request); <span class="hljs-type">SekaiApplication</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> SekaiApplication.getInstance();<br></code></pre></td></tr></table></figure><h1 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h1><p>打开<code>LuaHook</code> Hook <code>calculateHMAC</code>方法看看第一个参数<code>str</code></p><p><img src="/assets/SekaiCTF%202025%20Sekai%20Bank%20WriteUp/2.png" alt="image.png"></p><p>参数是<code>POST/api/auth/login&#123;&quot;password&quot;:&quot;114514&quot;,&quot;username&quot;:&quot;114514&quot;&#125;</code></p><p>跟我们猜想的一样，说明他是通过这个计算<code>X-Signature</code>的</p><p>那就简单了，直接Hook<code>getEndpointPath</code>和<code>getRequestBodyAsString</code>方法</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs lua">hook(<span class="hljs-string">&quot;com.sekai.bank.network.ApiClient$SignatureInterceptor&quot;</span>,<br>lpparam.classLoader,<br><span class="hljs-string">&quot;getEndpointPath&quot;</span>,<br><span class="hljs-string">&quot;okhttp3.Request&quot;</span>,<br><span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(it)</span></span><br><br><span class="hljs-keyword">end</span>,<br><span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(it)</span></span><br>  it.result=<span class="hljs-string">&quot;/flag&quot;</span><br><span class="hljs-keyword">end</span>)<br><br>hook(<span class="hljs-string">&quot;com.sekai.bank.network.ApiClient$SignatureInterceptor&quot;</span>,<br>lpparam.classLoader,<br><span class="hljs-string">&quot;getRequestBodyAsString&quot;</span>,<br><span class="hljs-string">&quot;okhttp3.Request&quot;</span>,<br><span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(it)</span></span><br><span class="hljs-keyword">end</span>,<br><span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(it)</span></span><br>  it.result=<span class="hljs-string">[[&#123;&quot;unmask_flag&quot;:true&#125;]]</span><br><span class="hljs-keyword">end</span>)<br></code></pre></td></tr></table></figure><p>接着我们直接登录，然后他就会自动计算<code>X-Signature</code>,然后拿<code>ProxyPin</code>重写请求就行了</p><h1 id="请求重写"><a href="#请求重写" class="headerlink" title="请求重写"></a>请求重写</h1><p><img src="/assets/SekaiCTF%202025%20Sekai%20Bank%20WriteUp/3.png" alt="image.png"></p><p><img src="/assets/SekaiCTF%202025%20Sekai%20Bank%20WriteUp/4.png" alt="image.png"></p><p><img src="/assets/SekaiCTF%202025%20Sekai%20Bank%20WriteUp/5.png" alt="image.png"></p><p><img src="/assets/SekaiCTF%202025%20Sekai%20Bank%20WriteUp/6.png" alt="image.png"></p><p><code>SEKAI&#123;are-you-ready-for-the-real-challenge?&#125;</code></p><p>谢谢大家</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/08/27/hello-world/"/>
    <url>/2025/08/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
